---
title: "R you serious? Teaching R programming to psych students"
subtitle: "*ECVP 2025*" #European Conference on Visual Perception

format:
  revealjs:
    theme: [default, css/MS_clean.scss]
    toc: false
    toc-depth: 3
    toc-title: "Contens"
    number-sections: false
    number-depth: 1
    footer: "ECVP | R you serious | Snijder-Steinhilber"
    include-after-body: no_footer_on_title_page.html
    chalkboard: false
    slide-number: true
    highlight-style: a11y
    code-link: false
    preview-links: true
    embed-resources: true
    slide-level: 2
    # logo: images/white_space.png
    # header: "fgme2023 -- Steinhilber"
    # header-logo: images/logo.png
    hide-from-titleSlide: "text"
author:
  - name: Meike Snijder-Steinhilber
    orcid: 0000-0002-7144-2100
    email: Meike.Steinhilber@uni-mainz.de
    affiliations: University of Mainz
filters:
- reveal-header # https://github.com/shafayetShafee/reveal-header
- css/appendix.lua
- css/custom_header.lua
    #css: [syntax-highlight.css]
execute:
  echo: true
  warning: true
editor: source
---

```{r}
#| echo: false
#| output: false
#| include: false
library(papaja)
library(trackdown)
library(knitr)
library(dplyr)
library(kableExtra)
library(ggplot2) 
library(glue)
library(latex2exp)
library(purrr)
library(readr)
library(magrittr)
library(magick)

palette <- "RdYlBu"  #"Dark2"
green <- "#69b3a2"
blue <- "#2c7bb6"  #"#404080"
light_blue <- "#abd9e9"
red <- 	"#d7191c" #"#ca0020" "#CD2626" "#8B0000"
light_red <- "#fca4a4" # "red"
orange <- "#fdae61"
yellow <- "#ffffbf"

theme_set(theme_bw(base_size = 12))
base_size <- 18

n_rep <- 10000
distribution <- "normal"
dist <- gsub("_", " ", distribution)
length_f_exp <- 3

linesep <- function(x,y=character()){
  if (!length(x))
    return(y)
  linesep(x[-length(x)], c(rep('',x[length(x)]-1),'\\addlinespace',y))  
}

# knitr::opts_knit$set(root.dir = glue::glue("{rprojroot::find_rstudio_root_file()}/presentation/"))
```

::: set-custom-header
Introduction
:::

# Introduction {background-color="var(--background)"}

## My backgorund

::::: columns
::: {.column width="50%"}
- Visited R classes in psych & computer science

- My R courses

  - R psych course
  - R data science course
  - R programming course
  - Meta science
  
- Developed *Otter*: free app to learn R
  
- Developed my own R package *sprtt*
:::
::: {.column width="50%"}
![](images/logo.png){width=70%}
:::
:::::



## Why Are We Here Today?

::::: columns
::: {.column width="60%"}

[**Goals**]{.inline-red-highlight}

-   **Exchange** experiences, solutions, and challenges

-   Share some of **my own lessons** from teaching R

-   **Explore possible approaches** for your teaching hurdles

[**Limitations**]{.inline-red-highlight}

-   Shaped strongly by **my own experiences** and by my lab‚Äôs context

-   Course settings & teaching styles are **unique**

-   **First** round of this workshop üéâ

:::
::: {.column width="40%"}
![](images/in_progress.jpeg)
:::
:::::

## Course structure

::::: columns
::: {.column width="50%"}
<br>

[**Content**]{.inline-red-highlight}

- My personal mindest & lessons learned

- Helpflul approaches & resources

- R package learnr

*~ 10 min break*

[**Problem solving**]{.inline-red-highlight}

- Workshop ~ 60 mins

:::
::: {.column width="50%"}

![](images/progress.jpeg)

:::
:::::


## Challenges in Teaching R

[**Low student motivation due to**]{.inline-red-highlight}

-   **Lack of intrinsic interest** in learning a programming language

-   No prior **experience** with programming

-   Unclear understanding of why this is a **relevant skill**

-   Expectation that it will be **difficult to learn**

[**Structural challenges**]{.inline-red-highlight}

-   Students have very **heterogeneous background** knowledge

-   Inconsistent use of **statistical software** across labs and courses

-   **Limited time** available to teach R

-   Large **number of students** in each course

-   Missing resources to provide **individual feedback**

## Getting to know each other

[**Please share briefly:**]{.inline-red-highlight}

-   Your name, university, and current role

-   What you hope to gain from this workshop

-   One challenge (big or small) you or your lab experience when teaching R

![](images/share.png){width=80%}




::: set-custom-header
(My) Mindset
:::

# Mindset {background-color="var(--background)"}

## Personal lessons learned I

[**Structure**]{.inline-red-highlight}

-   Set realistic **teaching goals** --- and stick to them

-   Recognize that **seminar structure** strongly shapes student mindset

-   Provide sufficient **support**: resources, exercises, and constructive feedback

[**Communication**]{.inline-red-highlight}

-   Be **transparent** and straightforward in communication

-   You **set the tone** --- be aware of your influence

-   When reacting to background issues, **explain openly** when and why

## Personal lessons learned II

[**Feedback & change:**]{.inline-red-highlight}

-   **Refine** the course each semester (step by step)

-   Try new approaches; **don‚Äôt repeat what didn‚Äôt work**

-   Always **seek feedback** (from the whole class, in presence)

-   Feedback **can hurt**, share your experience with others

-   Take feedback seriously, but always **consider the context**

    -   What caused it? What can I do to improve the situation?

-   [Small adjustments can make a big difference]{.inline-red-highlight}

## Teaching R means teaching a language

::::: columns
::: {.column width="50%"}

<br>

-   Syntax = grammar
-   Functions = vocabulary

<br>

-   **Practice**, practise, practise, ....
-   Do not forget to teach **all** of the basics
:::

::: {.column width="50%"}
[**Balance the three key skills:**]{.inline-red-highlight}

-   Reading code
-   Debugging (learning to help yourself)
-   Writing code

[**Design exercises with intention:**]{.inline-red-highlight}

-   Order tasks by **difficulty and prior knowledge**
-   Match exercise types to **specific skills**
-   Mix very **simple with more complex tasks**
:::
:::::

## Programming means failing

> *‚ÄúExperienced programmers don‚Äôt fail less ‚Äî they just recover faster.‚Äù*

-   **Normalize failure**
    -   e.g., debug code live, mention common errors
-   **Encourage self-help strategies first**
    -   Demonstrate practical debugging techniques
    -   How do I read package documentations?

## Increasing student motivation I

::::: columns
::: {.column width="60%"}
[**Relevance**]{.inline-red-highlight}

-   Show examples of what students will be **able to do by the end** of the course
-   Highlight how **R is needed** for projects, research, and the curriculum
-   Show the **broader potential** of R beyond statistics
  - Data Wizzards
  - Publish your own book, website, tutorial, ...
  - Create art
-   Use **diagnostic or test questions** to give students with prior knowledge realistic feedback on their level

:::
::: {.column width="40%"}
![](images/art_screenshot.png)
[https://art.djnavarro.net/gallery/]("https://art.djnavarro.net/gallery/")
:::
:::::


## Increasing student motivation II

::::: columns
::: {.column width="50%"}
[**Make it "fun"**]{.inline-red-highlight}

-   **Playful** or surprising examples
    -   e.g., art with ggplot, scatterplot dinosaurs
-   Interesting **themes** (even fun column names can help)

[**Support motivation through feedback**]{.inline-red-highlight}

-   Timely, constructive, and **encouraging feedback**
:::
::: {.column width="50%"}
![](images/datasaurus.png)
:::
:::::

## Share: Increase motivation

![](images/share.png){width=80%}

## Trade off teaching improvements vs work-load

::::: columns
::: {.column width="50%"}
-   **little time & resources:** start with small improvements

-   **change the system instead of your workload**

    -   ask for an student assistance
    -   collaborate with other teachers
    -   teaching funds
    -   new concepts: students feedback the code from each other

-   **external (free & online) resources:**

    -   AI, software package, online tutorial, ...
:::
::: {.column width="50%"}
![](images/stress.jpeg)
:::
:::::


## R basics

::::: columns
::: {.column width="50%"}
**Foundations**

-   Variables
-   Data types
-   Comments vs. code
-   Missing values (important for error messages)
-   Functions & arguments
-   Reading and writing data sets

**Working with R**

-   R projects
-   R scripts & R Markdown
-   R packages (*Who writes R packages?*)
:::

::: {.column width="50%"}

**Programming skills**

-   Flexible vs. hard coding
-   Control structures (loops, if‚Äìelse)
-   Understand error messages
-   debugging skills


**Tidyverse**

-   dplyr
-   ggplot2

[And THEN, what you actually want to teach ...]{.inline-red-highlight} üòâ
:::
:::::

::: set-custom-header
Approaches and resources
:::

# Approaches and resources {background-color="var(--background)"}

## Simulate your own data sets

::::: columns
::: {.column width="50%"}

[**Useful functions:**]{.inline-red-highlight}

- `rnorm()` ‚Äì generate normal-distributed values
- `runif()` ‚Äì generate uniform random values
- `sample()` ‚Äì draw random samples
- `rbinom()` ‚Äì simulate binary outcomes
- `rexp()`, `rgamma()`, etc. ‚Äì simulate from other distributions
- `expand.grid()` ‚Äì create all combinations of factors
:::

::: {.column width="50%"}
[**Useful packages:**]{.inline-red-highlight}

-   [faux](%22https://scienceverse.github.io/faux/%22)
-   [fabricatr](%22https://declaredesign.org/r/fabricatr/%22)
-   [messy](%22https://nrennie.rbind.io/messy/%22)
-   [truffle](%22https://mmmdata.io/posts/2025/08/creating-messy-datasets-for-teaching-purposes-with-truffle/%22) --- not on CRAN

[**Datasets archive:**]{.inline-red-highlight}

- [kaggle]("https://www.kaggle.com/datasets")
:::
:::::



## Example: A quick data set

```{r}
library(dplyr)
set.seed(42)
n <- 80
df <- tibble(
  subject = 1:n,
  age = sample(18:70, n, replace = TRUE),
  height  = rnorm(n, mean = 170, sd = 10),
  group   = sample(c("control", "treatment"), n, replace = TRUE)
) %>%
  mutate(
    score = rnorm(n, mean = ifelse(group == "treatment", 75, 70), sd = 5),
    response = rnorm(n, mean = 50, sd = 10)
  )

df %>% head()

```

## Example: Correlated data

```{r, message=FALSE}
#| output-location: column
library("MASS")
set.seed(123)

# Define the mean vector
mean_vector <- c(0, 2, 1.8)

# Define the covariance matrix
cov_matrix <- matrix(c(
  1.00, 0.22, 0.10,
  0.22, 1.00, 0.80,
  0.10, 0.80, 1.00
), nrow = 3, byrow = TRUE)

# Generate n correlated random numbers
n <- 200
correlated_data <- mvrnorm(n, mu = mean_vector, Sigma = cov_matrix)

# Convert to a data frame and add column names
correlated_data <- data.frame(correlated_data)
names(correlated_data) <- c("fitness_level", "sport", "health")

# Calculate the correlations
round(cor(correlated_data), 2)
```


## Share: Your data tips

![](images/share.png){width=80%}

## Constructive Alignment

::::: columns
::: {.column width="50%"}
> *Teaching, learning, and assessment should all point in the same direction.*

[**Intended learning outcomes**]{.inline-red-highlight}

- What should students be able to do?
- What specific R skills should students be able to demonstrate?
- e.g., import a dataset, run a regression, read code from others
:::
::: {.column width="50%"}
[**Teaching & learning activities**]{.inline-red-highlight}

- How will they practice and engage with the content?
- e.g., exercises at home, debugging code from other students, projects with real data)

[**Assessment**]{.inline-red-highlight}

- How will they demonstrate achievement of the outcomes?
- e.g., open book exams, oral explanations, ...
:::
:::::


## Constructive Alignment ‚Äì Background

-   Developed by John Biggs (1996)
-   Based on the idea that students **construct their own learning**
-   The role of the teacher: **design learning environments** that support this process
-   Alignment means:
    -   Learning outcomes define what students should achieve
    -   Teaching activities give opportunities to practice
    -   Assessment measures achievement of outcomes

## Alternative exams

::::: columns
::: {.column width="50%"}
[**Open-book exams**]{.inline-red-highlight}

-   **Debug** or correct given code
-   **Extend** existing scripts with new functionality
-   **Explain** what code does (or why it fails)
-   Interpret **error messages**
-   Use **R‚Äôs help system** to solve a task with a new function
:::
::: {.fragment .column width="50%"}
[**Data science contest**]{.inline-red-highlight}

-   Students have to **analyze a (simulated) dataset**
    -   use *personas* to create variability
    -   teaches also the meaning of QRPs & *p*-hacking
-   **Students compete** to produce the best talk/analysis/visualization
-   Students have to **detect the "bad sheeps"**
-   Encourages creativity, **real-world problem-solving**, and communication of results
:::
:::::

## Share: Your alternative exams

![](images/share.png){width=80%}

## Flipped Classroom ‚Äì The concept

::::: columns
::: {.column width="50%"}
[**Traditional order is reversed:**]{.inline-red-highlight}

-   Students first engage with new material **at home** (videos, readings, tutorials)
-   **Class time**: practice, discussion, problem-solving
-   Emphasizes **active learning** rather than passive listening
-   Teacher role shifts from ‚Äúlecturer‚Äù to **facilitator/coach**
:::

::: {.fragment .column width="50%"}
[**Useful when:**]{.inline-red-highlight}

- Content can be learned at different paces
- Class time is valuable for **collaboration and feedback**

[**Success factors:**]{.inline-red-highlight} 

- Clear, well-structured pre-class materials
- Accountability (e.g., small quizzes, short reflections)
- In-class activities tightly linked to pre-class work
:::
:::::

## Flipped Classroom ‚Äì Challenges

::::: columns
::: {.column width="40%"}
![](images/grille.jpeg)
:::
::: {.fragment .column width="60%"}
[**Students may be unprepared in class**]{.inline-red-highlight}

[**High effort for instructors:**]{.inline-red-highlight}

-   Preparing quality pre-class materials (texts, videos, exercises)
-   Designing effective in-class activities can be difficult

[**Requires a cultural shift:**]{.inline-red-highlight}

-   Students expect ‚Äúbeing taught‚Äù in class
-   Teachers must let go of content delivery
-   Teachers must be "strict"
:::
:::::


## Share: Flipped classroom experience

![](images/share.png){width=80%}

## Teaching materials

::::: columns
::: {.column width="50%"}
**Online Books**

-   [R for Data Science](%22https://r4ds.hadley.nz/%22)
-   [R Cookbook](%22https://rc2e.com/%22)
-   [ggplot2](%22https://ggplot2-book.org/%22)
-   [Learning Statistics with R](%22https://learningstatisticswithr.com/%22)
-   [Advanced R](%22https://adv-r.hadley.nz/%22)
-   [R Packages](%22https://r-pkgs.org/%22)
-   [Our own lab book](%22https://amd-lab.github.io/R-Kurs-Buch/%22) ...
:::
::: {.column width="50%"}
**Free tutorials**

-   [Otter](https://meikesteinhilber.github.io/otter/)

-   [swirl](%22https://swirlstats.com/%22)

-   [A website with more resources](https://paulvanderlaken.com/2017/08/10/r-resources-cheatsheets-tutorials-books/)
:::
:::::


## ChatGPT --- Students

::::: columns
::: {.column width="50%"}
[**Opportunities**]{.inline-red-highlight}

-   Coding assistant
    -   explanations, examples, debugging, feedback
-   Practice problems, synthetic datasets
-   Compare and critique AI vs. own solutions

[**Dangers**]{.inline-red-highlight}

-   Cheating
-   AI usage prevents learning
-   No critical thinking
:::
::: {.fragment .column width="50%"}
[**Ground rules**]{.inline-red-highlight}

-   Specific to the seminar
    -   e.g., only valid if explicitly allowed, only for explanations
-   Only allow solutions taught in the course

[**Explicit usage**]{.inline-red-highlight}

-   Use AI for some homework explicitly
    -   Warning: only in later stages
-   Live demos in class
    -   evaluating AI answers
-   Critical thinking
    -   correctness, efficiency, relevance
:::
:::::


## ChatGPT --- Teachers

-   **Efficiency first**
    -   save time for what matters most (teaching & feedback)
-   **Friendlier**, more constructive feedback phrasing
-   **More content**
    -   Generate exercises, code examples, explanations
-   **Alternative explanations** (multiple ways to explain)
-   **Adapt exercises** to different levels (beginner vs advanced)
-   ...


## Share: Your experience with AI in class

![](images/share.png){width=80%}

::: set-custom-header
learnr
:::

# R package: learnr {background-color="var(--background)"}

## Concept

::::: columns
::: {.column width="45%"}

- [R package for interactive, self-paced tutorials]{.inline-red-highlight}

- in R Markdown (.Rmd)

- create you own shiny apps

    - code exercises
    -   quizzes
    -   hints/solutions
    -   immediate feedback

- supports flipped classroom

- increase at home exercises

- helps with automatic feedback

- [visit homepage](%22https://rstudio.github.io/learnr/%22)
:::
::: {.column width="55%"}

![](images/otter_example.png){.images-shadow width=90%}
:::
:::::




## Pros & Cons

::::: columns
::: {.column width="50%"}
[**Good for:**]{.inline-red-highlight}

-   Lots of (smaller) guided practices

-   Many students in class/lecture

-   Quick, auto-graded checks

-   Pre- or post-class homework

-   Heterogeneous student background

:::

::: {.column width="50%"}
[**Not ideal for**]{.inline-red-highlight}

-   Large, complex projects with many valid paths

-   Heavy computation or huge datasets

-   Assessments needing complex, rich and individual feedback

-   No resources for implementation
:::
:::::


## Default design

![](images/learnr_example.png){.images-shadow}

[Tutorial on quizzes](%22https://learnr-examples.shinyapps.io/quiz_question/#section-basic-question-types%22)

## Simple examples I

::::: columns
::: {.column width="50%"}

a simple yes or no question 

```{r radio, echo = TRUE, eval=FALSE}
question_radio(
  "Is this a good question?",
  answer("yes", correct = TRUE),
  answer("no",
         message = 'This is a good question.')
)
```
:::
::: {.column width="50%"}
![](images/question.png){.images-shadow}
:::
:::::




## Simple examples II

::::: columns
::: {.column width="50%"}

Check a number

```{r number, echo = TRUE, eval=FALSE}
question_numeric(
 "What is pi rounded to 2 digits?",
 answer(3,message = "Don't forget to use the digits argument"),
 answer(3.14, correct = TRUE),
 allow_retry = TRUE,
 min = 3,
 max = 4,
 step = 0.01
)
```
:::
::: {.column width="50%"}
![](images/question-2.png){.images-shadow}
:::
:::::



## Simple examples III

::::: columns
::: {.column width="60%"}

Checkboxes 

```{r checkbox, echo = TRUE, eval=FALSE}
learnr::question_checkbox(
  "Select all the toppings that belong on a Margherita Pizza:",
  answer("tomato", correct = TRUE),
  answer("mozzarella", correct = TRUE),
  answer("basil", correct = TRUE),
  answer("extra virgin olive oil", correct = TRUE),
  answer("pepperoni", message = "Great topping! ... just not on a Margherita Pizza"),
  answer("onions"),
  answer("bacon"),
  answer("spinach"),
  random_answer_order = TRUE,
  allow_retry = TRUE,
  try_again = "Be sure to select all toppings!"
)
```
:::
::: {.column width="40%"}
![](images/question2.png){.images-shadow}
:::
:::::

## Otter as an example

~ 15 mins

[Visit the Otter site]("https://otter.uni-frankfurt.de/")

![](images/logo.png){width=70%}

::: set-custom-header
Workshop
:::

# Workshop {background-color="var(--background)"}

Oriented on Design Thinking

## Overview

::::: columns
::: {.column width="50%"}
[**Pick the problem**]{.inline-red-highlight}

1. Write down the problem

2. Pitch your problem to your group

3. The group picks one problem

[**Understand the problem**]{.inline-red-highlight}

4. Understand the problem better (5 x Why)

5. Make the problem worse
:::
::: {.column width="50%"}
[**Explore solutions**]{.inline-red-highlight}

6. 15% solutions

7. The problem giver picks 1-3 best solutions

[**Share your process**]{.inline-red-highlight}

8. One person in the group explains the problem & the selected 3 solutions
:::
:::::


## Pick the problem

::::: columns
::: {.column width="50%"}

*4-5 persons in one group*

- **Brainstorming alone**: (3-5 min)

  - make notes of your struggles
  - What is the worst of all these problems to you?
    - Pick only one!
  - Prepare your pitch for your worst problem
    - Why is your problem relevant to you?
   
:::
::: {.column width="50%"}
- **Pitch your problem to your group** (5-8 mins)

  - 30-60s per problem
  - What is the problem?
  - Why does the problem matter?

- **The group picks one problem** (2 mins)

  - everyone has two votes
  - the most picket problem wins
  
:::
:::::

  
## Understand the problem

- **15% solutions** (20 mins)

  - Question: [**What can you already do without additional resources or external influences?**]{.inline-red-highlight}
  
  - Brainstorming alone: everyone takes notes by themselves (5 mins)
  - Share your solutions to the group & ask questions (15 mins)
  
- **The problem giver picks 1-3 best solutions** (1 min)

  - prepare your final notes and pick a group speaker
  - Ever group has 3 min to share their picket problem and the picked solutions
  
## Share your process

3 mins per groups

![](images/share.png){width=80%}

::: set-custom-header
Feedback
:::

# Feedback {background-color="var(--background)"}


## Quick round of feedback

::::: columns
::: {.column width="40%"}
![](images/in_progress.jpeg)
:::
::: {.column width="60%"}

[**If you would give this workshop next:**]{.inline-red-highlight}

- What 1-3 thinks would you **change**?

- What 1-3 things would you **keep**?
:::
:::::


::: set-custom-header
:::

## Contact

::::: columns
::: {.column width="60%"}
<br/> **Software:**

-   [Otter](https://otter.uni-frankfurt.de/Grundlagen/) (Shiny App)

-   [sprtt](https://meikesteinhilber.github.io/sprtt/) (CRAN Package)

<br/>

**Contact:**

E-Mail: meike.steinhilber\@uni-mainz.de

GitHub: [MeikeSteinhilber](https://github.com/MeikeSteinhilber)

Homepage: <https://methoden.amd.psychologie.uni-mainz.de/steinhilber/>
:::

::: {.column width="40%" left="50%"}
<br/><br/> <br/><br/> <br/><br/> <br/><br/> <br/> <br/>
:::
:::::

![](images/Meike_Snijder_Steinhilber2025_1.jpg){.absolute top="20%" left="65%" width="200"} ![](images/logo.png){.absolute top="20%" left="35%" width="150"}

::: set-custom-header
Appendix
:::

<!-- # Appendix {.appendix background-color="var(--background)"} -->

<!-- ##  {#slide-id1 .no-title data-menu-title="SPRT"} -->

<!-- ![](images/sprt_formulas.png) -->

::::: columns
::: {.column width="50%"}
:::
::: {.fragment .column width="50%"}
:::
:::::

<!-- -   [post-hoc analyses of QRP]{.inline-red-highlight} -->
